# -*- coding: utf-8 -*-
"""
/***************************************************************************
 NuevoNido
                                 A QGIS plugin
 agregar un nuevo nido de colibri y crear nuevo buffer
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-04-21
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Ariana Fuentes
        email                : paola0845@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, QDate
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QMessageBox, QTableWidgetItem 
from qgis.core import QgsProject, QgsFeature, QgsGeometry, QgsPoint

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .nuevo_nido_dialog import NuevoNidoDialog
from .tabla_impactos import DlgTabla
import os.path


class NuevoNido:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'NuevoNido_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Agregar nuevo nido')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('NuevoNido', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToVectorMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/nuevo_nido/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Agrega nuevo nido'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginVectorMenu(
                self.tr(u'&Agregar nuevo nido'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = NuevoNidoDialog()
            #QMessageBox.information(self.dlg, "Mensaje", "Esto solo debe correr una vez")
            self.dlg.cmbEstado.currentTextChanged.connect(self.evt_cmbEstado_change)
            #self.dlg.cmbEspecie.currentTextChanged.connect(self.evt_cmbEspecie_change) #No necesita hacer las dos conexiones, podemos usar la misma ya creada
            #QMessageBox.information(self.dlg, "Mensaje", "Esto solo debe correr siempre")
        #Crear conexion al mapa #ESTO DEBE ESTAR FUERA DEL BLOQUE IF, YA QUE SOLO SE EJECUTA UNA VEZ. POR ESTO CREA SIEMPRE EL NIDO EN EL MISMO LUGAR, YA QUE NO ACTUALIZA EL CENTRO DEL MAPA 
        mc = self.iface.mapCanvas() 
        self.dlg.spbX.setValue(mc.center().x()) 
        self.dlg.spbY.setValue(mc.center().y())  
        self.dlg.dteFecha.setDate(QDate.currentDate())


        #Revisar que las capas esten cargadas #IGUAL A LO ANTERIOR. DEBE ESTAR FUERA DEL IF
        map_layers = [] 
        for lyr in mc.layers(): 
            map_layers.append(lyr.name()) 
        
        missing_layers = [] 
        if not "Avistamientos" in map_layers: 
            missing_layers.append("Avistamientos") 
        if not "Buffer Nidos" in map_layers: 
            missing_layers.append("Buffer Nidos") 
        if missing_layers: 
            msg = "Las siguientes capas hacen faltas en este proyecto" 
            for lyr in missing_layers: 
                msg += f"\n(lyr)"
            QMessageBox.critical(self.dlg, "Capas Faltantes", msg) 
            return 

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            #QMessageBox.information(self.dlg, "Mensaje", "Esto solo debe correr si presiona ok") 
            lyrNido = QgsProject.instance().mapLayersByName("Avistamientos")[0]  
            lyrBuffer = QgsProject.instance().mapLayersByName("Buffer Nidos")[0]
            lyrLineal = QgsProject.instance().mapLayersByName("buffer_proyectos_lineales")[0]
            idxNidoId = lyrNido.fields().indexOf("nidoID") 
            valNidoId = lyrNido.maximumValue(idxNidoId) + 1 
            #QMessageBox.information(self.dlg, "Mensaje", f"Nuevo Nido Id = (valNidoId)")
            valX = self.dlg.spbX.value()
            valY = self.dlg.spbY.value() 
            valEsp = self.dlg.cmbEspecie.currentText()
            valEst = self.dlg.cmbEstado.currentText() 
            valBuff = self.dlg.spbBufDist.value() 
            valFecha = self.dlg.dteFecha.date() 
            #QMessageBox.information(self.dlg, "Mensaje", f"Nuevo Nido Id = (valNidoId)\nCoord X = {valX}\nCoord Y = {valY}")
            ftrNido = QgsFeature(lyrNido.fields()) 
            ftrNido.setAttribute("id", valNidoId) 
            ftrNido.setAttribute("coord_x", valX)  
            ftrNido.setAttribute("coord_y", valY) 
            ftrNido.setAttribute("fecha", valFecha)
            ftrNido.setAttribute("especie", valEsp) 
            ftrNido.setAttribute("estado", valEst)  
            ftrNido.setAttribute("NidoID", valNidoId) 
            ftrNido.setAttribute("dist_buf", valBuff) 
            geom = QgsGeometry(QgsPoint(valX, valY))
            ftrNido.setGeometry(geom)
            pr = lyrNido.dataProvider() 
            pr.addFeatures([ftrNido])
            lyrNido.reload() 

            #agregar el buffer 
            pr = lyrBuffer.dataProvider()
            buffer = geom.buffer(valBuff, 10) 
            ftrNido.setGeometry(buffer)
            pr.addFeatures([ftrNido])
            lyrBuffer.reload() 

            dlgTabla = DlgTabla()
            dlgTabla.setWindowTitle(f"Tabla de impactos para nido{valNidoId}")
            bb = buffer.boundingBox()
            lineales = lyrLineal.getFeatures(bb)
            for lineal in lineales:
                valID = lineal.attribute("Proyecto") 
                valTipo = lineal.attribute("Tipo")
                valDistancia = lineal.geometry().distance(geom)
                if valDistancia < valBuff: 
                    fila = dlgTabla.tbl_impactos.rowCount()
                    dlgTabla.tbl_impactos.insertRow(fila)
                    dlgTabla.tbl_impactos.setItem(fila, 0, QTableWidgetItem(str(valID)))
                    dlgTabla.tbl_impactos.setItem(fila, 1, QTableWidgetItem(valTipo.upper()))
                    #dlgTabla.tbl_impactos.setItem(fila, 2, QTableWidgetItem(f"{valDistancia: .2f}")) 
                    twi = QTableWidgetItem(f"{valDistancia: .2f}")
                    twi.setTextAlignment(QtCore.Qt.AlignRight)
                    dlgTabla.tbl_impactos.setItem(fila, 2, twi)

            dlgTabla.tbl_impactos.sortItems(2, QtCore.Qt.AscendingOrder)
            dlgTabla.show()
            dlgTabla.exec_()








        else: 
            QMessageBox.information(self.dlg, "Mensaje", "Esto solo debe correr si presiona cancel")

    def evt_cmbEstado_change(self, estado): 
        especie = self.dlg.cmbEspecie.currentText()
        #print(estado, especie) # Para mostrar la informacion no sirve un print, debe usar un QMessageBox
        QMessageBox.information(self.dlg, "Mensaje", f"Especie = {especie}\nEstado = {estado}") #Aunque no es necesario le permite identificar si esta usando los valores correctos
        if estado == "Nido Activo" and especie == "Colibri Esmeralda": 
            self.dlg.spbBufDist.setValue(600)
        elif estado == "Nido Inactivo" and especie == "Colibri Esmeralda": 
            self.dlg.spbBufDist.setValue(300)
        elif estado == "Nido Activo" and especie == "Colibri": 
            self.dlg.spbBufDist.setValue(400)
        elif estado == "Nido Inactivo" and especie == "Colibri": 
            self.dlg.spbBufDist.setValue(200)
        elif estado == "Nido Activo" and especie == "No identificado": 
            self.dlg.spbBufDist.setValue(200)
        else: 
            self.dlg.spbBufDist.setValue(100)
    #def evt_cmbEspecie_change(self, especie):
    #    estado = self.dlg.cmbEstado.currentText() 
    #    print(especie, estado)
    #    if estado == "Nido Activo" and especie == "Colibri Esmeralda": 
    #        self.dlg.spbBufDist.setValue(600)
    #    elif estado == "Nido Inactivo" and especie == "Colibri Esmeralda": 
    #        self.dlg.spbBufDist.setValue(300)
    #    elif estado == "Nido Activo" and especie == "Colibri": 
    #        self.dlg.spbBufDist.setValue(400)
    #    elif estado == "Nido Inactivo" and especie == "Colibri": 
    #        self.dlg.spbBufDist.setValue(200)
    #    elif estado == "Nido Activo" and especie == "No identificado": 
    #        self.dlg.spbBufDist.setValue(200)
    #    else: 
    #        self.dlg.spbBufDist.setValue(100)  
